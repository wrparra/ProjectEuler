using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using ProjectEuler.Collections;

namespace ProjectEuler.Problems
{
    /// <summary>
    /// Even Fibonacci numbers
    /// Problem 2
    /// 
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 
    /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class EulerProblem002 : IEulerProblem
    {
        private readonly int _start;
        private readonly int _limit;
        private readonly List<int> _results;

        public EulerProblem002(int start, int limit = 4000000)
        {
            _start = start;
            _limit = limit;
            _results = new List<int>();
        }

        private void Calculate()
        {
            var index = _start;
            var result = 0;
            while (result < _limit)
            {
                result = Fibonacci(++index);
                _results.Add(result);
            }
        }

        private void CalculateEvenNumbers()
        {
            var index = _start;
            var result = 0;
            while (result < _limit)
            {
                result = Fibonacci(index++);
                if (result % 2 == 0)
                    _results.Add(result);
            }
        }

        public int Solve()
        {
            //CalculateEvenNumbers();
            //return _results.Sum();

            return GenerateInfinteFibonacci().Where(x => x % 2 == 0).TakeWhile(x => x < _limit).Sum();
        }

        public string Print()
        {
            Calculate();
            return string.Join(", ", _results.ToArray());
        }

        /// <summary>
        /// Generate infinite fibonacci lazy list
        /// </summary>
        /// <returns></returns>
        private IEnumerable<int> GenerateInfinteFibonacci()
        {
            var count = _start;
            while (true)
            {
                yield return Fibonacci(count++);
            }
        }

        /// <summary>
        /// A sucessão de Fibonacci ou sequência de Fibonacci é uma sequência de números naturais, 
        /// na qual os primeiros dois termos são 0 e 1, e cada termo subsequente corresponde à soma dos dois precedentes.
        /// </summary>
        /// <see cref="http://pt.wikipedia.org/wiki/N%C3%BAmero_de_Fibonacci"/>
        private int Fibonacci(int n)
        {
            if (n == 0) return 0;
            if (n == 1) return 1;
            return Fibonacci(n - 1) + Fibonacci(n - 2);
        }
    }
}
